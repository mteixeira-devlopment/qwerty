// <auto-generated />
using System;
using Account.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Account.API.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20190403225853_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Account.API.Domain.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("id")
                        .HasColumnType("VARCHAR(38)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("id_customer")
                        .HasColumnType("VARCHAR(38)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("id_user")
                        .HasColumnType("VARCHAR(38)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Account.API.Domain.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)))
                        .HasColumnName("id")
                        .HasColumnType("VARCHAR(38)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birthdate")
                        .HasColumnType("DATE");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullname")
                        .HasColumnType("VARCHAR(80)");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("Account.API.Domain.Account", b =>
                {
                    b.HasOne("Account.API.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Account.API.Domain.Customer", b =>
                {
                    b.OwnsOne("Account.API.Domain.Document", "Document", b1 =>
                        {
                            b1.Property<string>("CustomerId")
                                .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                            b1.Property<string>("Photo")
                                .HasColumnName("doc_photo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnName("doc_text")
                                .HasColumnType("VARCHAR(11)");

                            b1.Property<bool>("Verified")
                                .HasColumnName("doc_verified")
                                .HasColumnType("BIT");

                            b1.ToTable("CUSTOMER");

                            b1.HasOne("Account.API.Domain.Customer")
                                .WithOne("Document")
                                .HasForeignKey("Account.API.Domain.Document", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
